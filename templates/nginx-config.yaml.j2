kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config
  namespace: nginx-ingress
data:
{% if oidc_external_status_address is defined %}
  external-status-address: {{ oidc_external_status_address }}
{% endif %}}
  main_snippets: |
    load_module modules/ngx_http_js_module.so;
{% if oidc_headless %}
  stream-snippets:
    resolver {{ oidc_kube_dns | default("kube-dns.kube-system.svc.cluster.local") }} valid=5s;

    server {
        listen 0.0.0.0:12345;
        zone_sync;
        zone_sync_server {{ oidc_headless_dns | default("nginx-ingress-headless.nginx-ingress.svc.cluster.local") }}:12345 resolve;        
    }
{% endif %}
  http-snippets: |
    # OpenID Connect configuration
    map $host $oidc_authz_endpoint {
{% for idp in oidc_idps.values() %}
        "{{ idp.hostname }}" {{ idp.oidc_authz_endpoint }};
{% endfor %}
    }

    map $host $oidc_token_endpoint {
{% for idp in oidc_idps.values() %}
        {{ idp.hostname }} {{ idp.oidc_token_endpoint }};
{% endfor %}
    }

    map $host $oidc_jwt_keyfile {
{% for idp in oidc_idps.values() %}
        {{ idp.hostname }} {{ idp.oidc_jwt_keyfile }};
{% endfor %}
    }

    map $host $oidc_client {
{% for idp in oidc_idps.values() %}
        {{ idp.hostname }} {{ idp.oidc_client_id }};
{% endfor %}
    }

    map $host $oidc_client_secret {
{% for idp in oidc_idps.values() %}
        {{ idp.hostname }} {{ idp.oidc_client_secret }};
{% endfor %}
    }

    map $host $oidc_scopes {
{% for idp in oidc_idps.values() %}
        {{ idp.hostname }} {{ idp.oidc_scopes | default("openid+profile+email+offline_access") }};
{% endfor %}
    }

    map $host $oidc_logout_redirect {
        # Where to send browser after requesting /logout location. This can be
        # replaced with a custom logout page, or complete URL.
{% for idp in oidc_idps.values() %}
        {{ idp.hostname }} {{ idp.oidc_logout_redirect | default("/logout") }};
{% endfor %}        
    }

    map $host $oidc_hmac_key {
        # This should be unique for every NGINX instance/cluster
{% for idp in oidc_idps.values() %}
        {{ idp.hostname }} {{ idp.oidc_hmac_key }};
{% endfor %}
    }

    map $scheme $oidc_cookie_flags {
        http  "Path=/; SameSite=lax;"; # For HTTP/plaintext testing
        https "Path=/; SameSite=lax; HttpOnly; Secure;"; # Production recommendation
    }

    # JWK Set will be fetched from $oidc_jwks_uri and cached here - ensure writable by nginx user
    proxy_cache_path /var/cache/nginx/jwk levels=1 keys_zone=jwk:64k max_size=1m;

    # Change timeout values to at least the validity period of each token type
{% if oidc_headless %}    
    keyval_zone zone=oidc_id_tokens:{{ oidc_keyval_size | default('1M') }} state=conf.d/oidc_id_tokens.json timeout={{ oidc_keyval_id_timeout | default('1h') }} sync;
    keyval_zone zone=refresh_tokens:{{ oidc_keyval_size | default('1M') }} state=conf.d/refresh_tokens.json timeout={{ oidc_keyval_refresh_timeout | default('8h') }} sync;
{% else %}
    keyval_zone zone=oidc_id_tokens:{{ oidc_keyval_size | default('1M') }} state=conf.d/oidc_id_tokens.json timeout={{ oidc_keyval_id_timeout | default('1h') }};
    keyval_zone zone=refresh_tokens:{{ oidc_keyval_size | default('1M') }} state=conf.d/refresh_tokens.json timeout={{ oidc_keyval_refresh_timeout | default('8h') }};
{% endif %}

    keyval $cookie_auth_token $session_jwt zone=oidc_id_tokens;   # Exchange cookie for JWT
    keyval $cookie_auth_token $refresh_token zone=refresh_tokens; # Exchange cookie for refresh token
    keyval $request_id $new_session zone=oidc_id_tokens; # For initial session creation
    keyval $request_id $new_refresh zone=refresh_tokens; # ''

    auth_jwt_claim_set $jwt_audience aud; # In case aud is an array
    js_import oidc from conf.d/openid_connect.js;
  ingress-template: |
    # configuration for {{ '{{' }}.Ingress.Namespace{{ '}}' }}/{{ '{{' }}.Ingress.Name{{ '}}' }}

    {{ '{{' }}if index $.Ingress.Annotations "custom.nginx.org/oidc"{{ '}}'}}
    log_format main_jwt '$remote_addr - $jwt_claim_sub [$time_local] "$request" $status '
                        '$body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

    map $jwt_claim_preferred_username $jwt_nibr521 {
        default $jwt_claim_preferred_username;
        ~^(?<username>.*)@(?<domain>.*)$ "${username}";
    }    
    {{ '{{' }}end{{ '}}' }}

    {{ '{{' }}range $upstream := .Upstreams{{ '}}' }}
    upstream {{ '{{' }}$upstream.Name{{ '}}' }} {
        zone {{ '{{' }}$upstream.Name{{ '}}' }} {{ '{{' }}if ne $upstream.UpstreamZoneSize "0"{{ '}}' }}{{ '{{' }}$upstream.UpstreamZoneSize{{ '}}' }}{{ '{{' }}else{{ '}}' }}256k{{ '{{' }}end{{ '}}' }};
        {{ '{{' }}if $upstream.LBMethod {{ '}}' }}{{ '{{' }}$upstream.LBMethod{{ '}}' }};{{ '{{' }}end{{ '}}' }}
        {{ '{{' }}range $server := $upstream.UpstreamServers{{ '}}' }}
        server {{ '{{' }}$server.Address{{ '}}' }}:{{ '{{' }}$server.Port{{ '}}' }} max_fails={{ '{{' }}$server.MaxFails{{ '}}' }} fail_timeout={{ '{{' }}$server.FailTimeout{{ '}}' }} max_conns={{ '{{' }}$server.MaxConns{{ '}}' }}
            {{ '{{' }}- if $server.SlowStart{{ '}}' }} slow_start={{ '{{' }}$server.SlowStart{{ '}}' }}{{ '{{' }}end{{ '}}' }}{{ '{{' }}if $server.Resolve{{ '}}' }} resolve{{ '{{' }}end{{ '}}' }};{{ '{{' }}end{{ '}}' }}
        {{ '{{' }}if $upstream.StickyCookie{{ '}}' }}
        sticky cookie {{ '{{' }}$upstream.StickyCookie{{ '}}' }};
        {{ '{{' }}end{{ '}}' }}
        {{ '{{' }}if $.Keepalive{{ '}}' }}keepalive {{ '{{' }}$.Keepalive{{ '}}' }};{{ '{{' }}end{{ '}}' }}
        {{ '{{' }}- if $upstream.UpstreamServers -{{ '}}' }}
        {{ '{{' }}- if $upstream.Queue{{ '}}' }}
        queue {{ '{{' }}$upstream.Queue{{ '}}' }} timeout={{ '{{' }}$upstream.QueueTimeout{{ '}}' }}s;
        {{ '{{' }}- end -{{ '}}' }}
        {{ '{{' }}- end{{ '}}' }}
    }
    {{ '{{' }}- end{{ '}}' }}

    {{ '{{' }}range $server := .Servers{{ '}}' }}
    server {
        {{ '{{' }}if not $server.GRPCOnly{{ '}}' }}
        {{ '{{' }}range $port := $server.Ports{{ '}}' }}
        listen {{ '{{' }}$port{{ '}}' }}{{ '{{' }}if $server.ProxyProtocol{{ '}}' }} proxy_protocol{{ '{{' }}end{{ '}}' }};
        {{ '{{' }}- end{{ '}}' }}
        {{ '{{' }}end{{ '}}' }}

        {{ '{{' }}if $server.SSL{{ '}}' }}
        {{ '{{' }}if $server.TLSPassthrough{{ '}}' }}
        listen unix:/var/lib/nginx/passthrough-https.sock ssl{{ '{{' }}if $server.HTTP2{{ '}}' }} http2{{ '{{' }}end{{ '}}' }} proxy_protocol;
        set_real_ip_from unix:;
        real_ip_header proxy_protocol;
        {{ '{{' }}else{{ '}}' }}
        {{ '{{' }}- range $port := $server.SSLPorts{{ '}}' }}
        listen {{ '{{' }}$port{{ '}}' }} ssl{{ '{{' }}if $server.HTTP2{{ '}}' }} http2{{ '{{' }}end{{ '}}' }}{{ '{{' }}if $server.ProxyProtocol{{ '}}' }} proxy_protocol{{ '{{' }}end{{ '}}' }};
        {{ '{{' }}- end{{ '}}' }}
        {{ '{{' }}end{{ '}}' }}
        ssl_certificate {{ '{{' }}$server.SSLCertificate{{ '}}' }};
        ssl_certificate_key {{ '{{' }}$server.SSLCertificateKey{{ '}}' }};
        {{ '{{' }}if $server.SSLCiphers{{ '}}' }}
        ssl_ciphers {{ '{{' }}$server.SSLCiphers{{ '}}' }};
        {{ '{{' }}end{{ '}}' }}
        {{ '{{' }}end{{ '}}' }}

        {{ '{{' }}range $setRealIPFrom := $server.SetRealIPFrom{{ '}}' }}
        set_real_ip_from {{ '{{' }}$setRealIPFrom{{ '}}' }};{{ '{{' }}end{{ '}}' }}
        {{ '{{' }}if $server.RealIPHeader{{ '}}' }}real_ip_header {{ '{{' }}$server.RealIPHeader{{ '}}' }};{{ '{{' }}end{{ '}}' }}
        {{ '{{' }}if $server.RealIPRecursive{{ '}}' }}real_ip_recursive on;{{ '{{' }}end{{ '}}' }}

        server_tokens "{{ '{{' }}$server.ServerTokens{{ '}}' }}";

        server_name {{ '{{' }}$server.Name{{ '}}' }};

        status_zone {{ '{{' }}$server.StatusZone{{ '}}' }};

        {{ '{{' }}if not $server.GRPCOnly{{ '}}' }}
        {{ '{{' }}range $proxyHideHeader := $server.ProxyHideHeaders{{ '}}' }}
        proxy_hide_header {{ '{{' }}$proxyHideHeader{{ '}}' }};{{ '{{' }}end{{ '}}' }}
        {{ '{{' }}range $proxyPassHeader := $server.ProxyPassHeaders{{ '}}' }}
        proxy_pass_header {{ '{{' }}$proxyPassHeader{{ '}}' }};{{ '{{' }}end{{ '}}' }}
        {{ '{{' }}end{{ '}}' }}

        {{ '{{' }}- if and $server.HSTS (or $server.SSL $server.HSTSBehindProxy){{ '}}' }}
        set $hsts_header_val "";
        proxy_hide_header Strict-Transport-Security;
        {{ '{{' }}- if $server.HSTSBehindProxy{{ '}}' }}
        if ($http_x_forwarded_proto = 'https') {
        {{ '{{' }}else{{ '}}' }}
        if ($https = on) {
        {{ '{{' }}- end{{ '}}' }}
            set $hsts_header_val "max-age={{ '{{' }}$server.HSTSMaxAge{{ '}}' }}; {{ '{{' }}if $server.HSTSIncludeSubdomains{{ '}}' }}includeSubDomains; {{ '{{' }}end{{ '}}' }}preload";
        }

        add_header Strict-Transport-Security "$hsts_header_val" always;
        {{ '{{' }}end{{ '}}' }}

        {{ '{{' }}if $server.SSL{{ '}}' }}
        {{ '{{' }}if not $server.GRPCOnly{{ '}}' }}
        {{ '{{' }}- if $server.SSLRedirect{{ '}}' }}
        if ($scheme = http) {
            return 301 https://$host:{{ '{{' }}index $server.SSLPorts 0{{ '}}' }}$request_uri;
        }
        {{ '{{' }}- end{{ '}}' }}
        {{ '{{' }}end{{ '}}' }}
        {{ '{{' }}- end{{ '}}' }}

        {{ '{{' }}- if $server.RedirectToHTTPS{{ '}}' }}
        if ($http_x_forwarded_proto = 'http') {
            return 301 https://$host$request_uri;
        }
        {{ '{{' }}- end{{ '}}' }}

        {{ '{{' }}with $jwt := $server.JWTAuth{{ '}}' }}
        auth_jwt_key_file {{ '{{' }}$jwt.Key{{ '}}' }};
        auth_jwt "{{ '{{' }}.Realm{{ '}}' }}"{{ '{{' }}if $jwt.Token{{ '}}' }} token={{ '{{' }}$jwt.Token{{ '}}' }}{{ '{{' }}end{{ '}}' }};

        {{ '{{' }}- if $jwt.RedirectLocationName{{ '}}' }}
        error_page 401 {{ '{{' }}$jwt.RedirectLocationName{{ '}}' }};
        {{ '{{' }}end{{ '}}' }}
        {{ '{{' }}end{{ '}}' }}

        {{ '{{' }}- if $server.ServerSnippets{{ '}}' }}
        {{ '{{' }}range $value := $server.ServerSnippets{{ '}}' }}
        {{ '{{' }}$value{{ '}}' }}{{ '{{' }}end{{ '}}' }}
        {{ '{{' }}- end{{ '}}' }}

        {{ '{{' }}- range $healthCheck := $server.HealthChecks{{ '}}' }}
        location @hc-{{ '{{' }}$healthCheck.UpstreamName{{ '}}' }} {
            {{ '{{' }}- range $name, $header := $healthCheck.Headers{{ '}}' }}
            proxy_set_header {{ '{{' }}$name{{ '}}' }} "{{ '{{' }}$header{{ '}}' }}";
            {{ '{{' }}- end {{ '}}' }}
            proxy_connect_timeout {{ '{{' }}$healthCheck.TimeoutSeconds{{ '}}' }}s;
            proxy_read_timeout {{ '{{' }}$healthCheck.TimeoutSeconds{{ '}}' }}s;
            proxy_send_timeout {{ '{{' }}$healthCheck.TimeoutSeconds{{ '}}' }}s;
            proxy_pass {{ '{{' }}$healthCheck.Scheme{{ '}}' }}://{{ '{{' }}$healthCheck.UpstreamName{{ '}}' }};
            health_check {{ '{{' }}if $healthCheck.Mandatory{{ '}}' }}mandatory {{ '{{' }}end{{ '}}' }}uri={{ '{{' }}$healthCheck.URI{{ '}}' }} interval=
                {{ '{{' }}- $healthCheck.Interval{{ '}}' }}s fails={{ '{{' }}$healthCheck.Fails{{ '}}' }} passes={{ '{{' }}$healthCheck.Passes{{ '}}' }};
        }
        {{ '{{' }}end -{{ '}}' }}

        {{ '{{' }}- range $location := $server.JWTRedirectLocations{{ '}}' }}
        location {{ '{{' }}$location.Name{{ '}}' }} {
            internal;
            return 302 {{ '{{' }}$location.LoginURL{{ '}}' }};
        }
        {{ '{{' }}end -{{ '}}' }}

        {{ '{{' }}if index $.Ingress.Annotations "custom.nginx.org/oidc"{{ '}}' }}
        include conf.d/openid_connect.server_conf; # Authorization code flow and Relying Party processing
        
        {{ '{{' }}- $oidc_errormsg := index $.Ingress.Annotations "custom.nginx.org/oidc-error-message"{{ '}}' }}
        {{ '{{' }}- if not $oidc_error_message{{ '}}' }}{{ '{{' }}$oidc_error_message = "NGINX / OpenID Connect login failure\n"{{ '}}' }}{{ '{{' }}end{{ '}}' }}
        set $internal_error_message {{ '{{' }}$oidc_error_message{{ '}}' }};

        {{ '{{' }}- $oidc_resolver := index $.Ingress.Annotations "custom.nginx.org/oidc-resolver-address"{{ '}}' }}
        resolver {{ oidc_resolver }}
        
        {{ '{{' }}- $oidc_subrequest_output_buffer_size := index $.Ingress.Annotations "custom.nginx.org/oidc-subrequest-output-buffer-size"{{ '}}' }}
        {{ '{{' }}- if not $oidc_subrequest_output_buffer_size{{ '}}' }}{{ '{{' }}$oidc_subrequest_output_buffer_size = 32k{{ '}}' }}{{ '{{' }}end{{ '}}' }}
        subrequest_output_buffer_size {{ '{{' }}$oidc_subrequest_output_buffer_size{{ '}}' }};  # To fit a complete tokenset response
        
        {{ '{{' }}- $oidc_gunzip := index $.Ingress.Annotations "custom.nginx.org/oidc-gunzip"{{ '}}' }}
        {{ '{{' }}- if not $oidc_gunzip{{ '}}' }}{{ '{{' }}$oidc_gunzip = on{{ '}}' }}{{ '{{' }}end{{ '}}' }}
        gunzip {{ '{{' }}$oidc_gunzip{{ '}}' }};  # Decompress IdP responses if necessary

        error_log /var/log/nginx/error.log debug;  # Reduce severity level as required
        {{ '{{' }}end{{ '}}' }}

        {{ '{{' }}range $location := $server.Locations{{ '}}' }}
        location {{ '{{' }}$location.Path{{ '}}' }} {
            {{ '{{' }}with $location.MinionIngress{{ '}}' }}
            # location for minion {{ '{{' }}$location.MinionIngress.Namespace{{ '}}' }}/{{ '{{' }}$location.MinionIngress.Name{{ '}}' }}
            {{ '{{' }}end{{ '}}' }}
            {{ '{{' }}if $location.GRPC{{ '}}' }}
            {{ '{{' }}if not $server.GRPCOnly{{ '}}' }}
            error_page 400 @grpcerror400;
            error_page 401 @grpcerror401;
            error_page 403 @grpcerror403;
            error_page 404 @grpcerror404;
            error_page 405 @grpcerror405;
            error_page 408 @grpcerror408;
            error_page 414 @grpcerror414;
            error_page 426 @grpcerror426;
            error_page 500 @grpcerror500;
            error_page 501 @grpcerror501;
            error_page 502 @grpcerror502;
            error_page 503 @grpcerror503;
            error_page 504 @grpcerror504;
            {{ '{{' }}end{{ '}}' }}

            {{ '{{' }}- if $location.LocationSnippets{{ '}}' }}
            {{ '{{' }}range $value := $location.LocationSnippets{{ '}}' }}
            {{ '{{' }}$value{{ '}}' }}{{ '{{' }}end{{ '}}' }}
            {{ '{{' }}- end{{ '}}' }}

            {{ '{{' }}with $jwt := $location.JWTAuth{{ '}}' }}
            auth_jwt_key_file {{ '{{' }}$jwt.Key{{ '}}' }};
            auth_jwt "{{ '{{' }}.Realm{{ '}}' }}"{{ '{{' }}if $jwt.Token{{ '}}' }} token={{ '{{' }}$jwt.Token{{ '}}' }}{{ '{{' }}end{{ '}}' }};
            {{ '{{' }}end{{ '}}' }}

            grpc_connect_timeout {{ '{{' }}$location.ProxyConnectTimeout{{ '}}' }};
            grpc_read_timeout {{ '{{' }}$location.ProxyReadTimeout{{ '}}' }};
            grpc_send_timeout {{ '{{' }}$location.ProxySendTimeout{{ '}}' }};
            grpc_set_header Host $host;
            grpc_set_header X-Real-IP $remote_addr;
            grpc_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            grpc_set_header X-Forwarded-Host $host;
            grpc_set_header X-Forwarded-Port $server_port;
            grpc_set_header X-Forwarded-Proto $scheme;

            {{ '{{' }}- if $location.ProxyBufferSize{{ '}}' }}
            grpc_buffer_size {{ '{{' }}$location.ProxyBufferSize{{ '}}' }};
            {{ '{{' }}- end{{ '}}' }}
            {{ '{{' }}if $.SpiffeCerts{{ '}}' }}
            grpc_ssl_certificate /etc/nginx/secrets/spiffe_cert.pem;
            grpc_ssl_certificate_key /etc/nginx/secrets/spiffe_key.pem;
            grpc_ssl_trusted_certificate /etc/nginx/secrets/spiffe_rootca.pem;
            grpc_ssl_server_name on;
            grpc_ssl_verify on;
            grpc_ssl_verify_depth 25;
            grpc_ssl_name {{ '{{' }}$location.ProxySSLName{{ '}}' }};
            {{ '{{' }}end{{ '}}' }}
            {{ '{{' }}if $location.SSL{{ '}}' }}
            grpc_pass grpcs://{{ '{{' }}$location.Upstream.Name{{ '}}' }};
            {{ '{{' }}else{{ '}}' }}
            grpc_pass grpc://{{ '{{' }}$location.Upstream.Name{{ '}}' }};
            {{ '{{' }}end{{ '}}' }}
            {{ '{{' }}else{{ '}}' }}
            proxy_http_version 1.1;
            {{ '{{' }}if $location.Websocket{{ '}}' }}
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            {{ '{{' }}- else{{ '}}' }}
            {{ '{{' }}- if $.Keepalive{{ '}}' }}proxy_set_header Connection "";{{ '{{' }}end{{ '}}' }}
            {{ '{{' }}- end{{ '}}' }}

            {{ '{{' }}- if $location.LocationSnippets{{ '}}' }}
            {{ '{{' }}range $value := $location.LocationSnippets{{ '}}' }}
            {{ '{{' }}$value{{ '}}' }}{{ '{{' }}end{{ '}}' }}
            {{ '{{' }}- end{{ '}}' }}

            {{ '{{' }} with $jwt := $location.JWTAuth {{ '}}' }}
            auth_jwt_key_file {{ '{{' }}$jwt.Key{{ '}}' }};
            auth_jwt "{{ '{{' }}.Realm{{ '}}' }}"{{ '{{' }}if $jwt.Token{{ '}}' }} token={{ '{{' }}$jwt.Token{{ '}}' }}{{ '{{' }}end{{ '}}' }};
            {{ '{{' }}if $jwt.RedirectLocationName{{ '}}' }}
            error_page 401 {{ '{{' }}$jwt.RedirectLocationName{{ '}}' }};
            {{ '{{' }}end{{ '}}' }}
            {{ '{{' }}end{{ '}}' }}

            {{ '{{' }}if index $.Ingress.Annotations "custom.nginx.org/oidc"{{ '}}' }}
            auth_jwt "" token=$session_jwt;
            error_page 401 = @do_oidc_flow;
            auth_jwt_key_request /_jwks_uri;
            access_log /var/log/nginx/access.log main_jwt;
            {{ '{{' }}end{{ '}}' }}

            proxy_connect_timeout {{ '{{' }}$location.ProxyConnectTimeout{{ '}}' }};
            proxy_read_timeout {{ '{{' }}$location.ProxyReadTimeout{{ '}}' }};
            proxy_send_timeout {{ '{{' }}$location.ProxySendTimeout{{ '}}' }};
            client_max_body_size {{ '{{' }}$location.ClientMaxBodySize{{ '}}' }};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header X-Forwarded-Proto {{ '{{' }}if $server.RedirectToHTTPS{{ '}}' }}https{{ '{{' }}else{{ '}}' }}$scheme{{ '{{' }}end{{ '}}' }};
            proxy_buffering {{ '{{' }}if $location.ProxyBuffering{{ '}}' }}on{{ '{{' }}else{{ '}}' }}off{{ '{{' }}end{{ '}}' }};
            {{ '{{' }}- if $location.ProxyBuffers{{ '}}' }}
            proxy_buffers {{ '{{' }}$location.ProxyBuffers{{ '}}' }};
            {{ '{{' }}- end{{ '}}' }}
            {{ '{{' }}- if $location.ProxyBufferSize{{ '}}' }}
            proxy_buffer_size {{ '{{' }}$location.ProxyBufferSize{{ '}}' }};
            {{ '{{' }}- end{{ '}}' }}
            {{ '{{' }}- if $location.ProxyMaxTempFileSize{{ '}}' }}
            proxy_max_temp_file_size {{ '{{' }}$location.ProxyMaxTempFileSize{{ '}}' }};
            {{ '{{' }}- end{{ '}}' }}
            {{ '{{' }}if $.SpiffeCerts{{ '}}' }}
            proxy_ssl_certificate /etc/nginx/secrets/spiffe_cert.pem;
            proxy_ssl_certificate_key /etc/nginx/secrets/spiffe_key.pem;
            proxy_ssl_trusted_certificate /etc/nginx/secrets/spiffe_rootca.pem;
            proxy_ssl_server_name on;
            proxy_ssl_verify on;
            proxy_ssl_verify_depth 25;
            proxy_ssl_name {{ '{{' }}$location.ProxySSLName{{ '}}' }};
            {{ '{{' }}end{{ '}}' }}
            {{ '{{' }}if $location.SSL{{ '}}' }}
            proxy_pass https://{{ '{{' }}$location.Upstream.Name{{ '}}' }}{{ '{{' }}$location.Rewrite{{ '}}' }};
            {{ '{{' }}else{{ '}}' }}
            proxy_pass http://{{ '{{' }}$location.Upstream.Name{{ '}}' }}{{ '{{' }}$location.Rewrite{{ '}}' }};
            {{ '{{' }}end{{ '}}' }}
            {{ '{{' }}end{{ '}}' }}
        }{{ '{{' }}end{{ '}}' }}
        {{ '{{' }}if $server.GRPCOnly{{ '}}' }}
        error_page 400 @grpcerror400;
        error_page 401 @grpcerror401;
        error_page 403 @grpcerror403;
        error_page 404 @grpcerror404;
        error_page 405 @grpcerror405;
        error_page 408 @grpcerror408;
        error_page 414 @grpcerror414;
        error_page 426 @grpcerror426;
        error_page 500 @grpcerror500;
        error_page 501 @grpcerror501;
        error_page 502 @grpcerror502;
        error_page 503 @grpcerror503;
        error_page 504 @grpcerror504;
        {{ '{{' }}end{{ '}}' }}
        {{ '{{' }}if $server.HTTP2{{ '}}' }}
        location @grpcerror400 { default_type application/grpc; return 400 "\n"; }
        location @grpcerror401 { default_type application/grpc; return 401 "\n"; }
        location @grpcerror403 { default_type application/grpc; return 403 "\n"; }
        location @grpcerror404 { default_type application/grpc; return 404 "\n"; }
        location @grpcerror405 { default_type application/grpc; return 405 "\n"; }
        location @grpcerror408 { default_type application/grpc; return 408 "\n"; }
        location @grpcerror414 { default_type application/grpc; return 414 "\n"; }
        location @grpcerror426 { default_type application/grpc; return 426 "\n"; }
        location @grpcerror500 { default_type application/grpc; return 500 "\n"; }
        location @grpcerror501 { default_type application/grpc; return 501 "\n"; }
        location @grpcerror502 { default_type application/grpc; return 502 "\n"; }
        location @grpcerror503 { default_type application/grpc; return 503 "\n"; }
        location @grpcerror504 { default_type application/grpc; return 504 "\n"; }
        {{ '{{' }}end{{ '}}' }}
    }{{ '{{' }}end{{ '}}' }}

    